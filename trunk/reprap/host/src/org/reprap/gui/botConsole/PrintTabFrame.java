/*
 * PrintTabFrame.java
 *
 * Created on June 30, 2008, 1:45 PM
 */

package org.reprap.gui.botConsole;

import java.util.*;
import java.text.SimpleDateFormat;
import java.net.URI;
//import java.awt.Desktop; //***AB
//import java.io.IOException;
import javax.swing.JOptionPane;
//import org.reprap.Main;
import org.reprap.Preferences;
import org.reprap.Printer;
import org.reprap.machines.Reprap;

/**
 *
 * @author  ensab
 */
public class PrintTabFrame extends javax.swing.JInternalFrame {
	
	private BotConsoleFrame parentBotConsoleFrame = null;
	private XYZTabPanel xYZTabPanel = null;
    private Printer printer;
    private boolean paused = false;
    private long startTime = -1;
    private int oldLayer = -1;
    
    /** Creates new form PrintTabFrame */
    public PrintTabFrame() {
        initComponents();
                try {
            if (Preferences.loadGlobalString("Geometry").equals("cartesian")) 
                buildRadioButton.setSelected(true);
        }
        catch (Exception e) {
            System.err.println("Failure trying to load 'Geometry' preference: " + e);
            return;
        }
        
        try {
            interLayerCoolingCheck.setSelected(Preferences.loadGlobalBool("InterLayerCooling"));
        } catch (Exception ex) {
            System.err.println("Warning: could not load InterLayerCooling flag for check box");
            return;
        }
        printer = org.reprap.Main.gui.getPrinter();
    }
    
    public void updateProgress()
    {
    	int layers = org.reprap.Main.gui.getLayers();
    	if(layers <= 0)
    		return;
    	
    	int layer = org.reprap.Main.gui.getLayer();
    	
    	// Only bother if the layer has just changed
    	
    	if(layer == oldLayer)
    		return;
    	
    	oldLayer = layer;

    	currentLayerOutOfN.setText("" + layer + "/" + layers);
 
    	progressBar.setMinimum(0);
    	progressBar.setMaximum(layers);
    	progressBar.setValue(layer);
    	
    	GregorianCalendar cal = new GregorianCalendar();
    	SimpleDateFormat dateFormat = new SimpleDateFormat("EE HH:mm");
    	Date d = cal.getTime();
		long e = d.getTime() + cal.getTimeZone().getOffset(d.getTime());
    	if(startTime < 0)
    	{
    		startTime = e;
    		return;
    	}
    	
    	if(layer <= 0)
    		return;
    	
    	long f = (layers*(e - startTime))/(layer);
    	int h = (int)(f/60000)/60;
    	int m = (int)(f/60000)%60;
    	
    	// No idea why this next bit doesn't work...
    	//if(cal.getTimeZone().inDaylightTime(d))
    	//{
    		f = f + 3600000;
    		//System.out.println("DST");
    	//}
    	if(m > 9)
    		expectedBuildTime.setText("" + h + ":" + m);
    	else
    		expectedBuildTime.setText("" + h + ":0" + m);
    	expectedFinishTime.setText(dateFormat.format(new Date(startTime + f)));
    }
    
    /**
     * So the BotConsoleFrame can let us know who it is
     * @param b
     */
    public void setFrames(BotConsoleFrame b, XYZTabPanel xyz)
    {
    	parentBotConsoleFrame = b;
    	xYZTabPanel = xyz;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        printButton = new java.awt.Button();
        pauseButton = new java.awt.Button();
        stopButton = new java.awt.Button();
        exitButton = new java.awt.Button();
        layerPauseCheck = new javax.swing.JCheckBox();
        buildRadioButton = new javax.swing.JRadioButton();
        simulateRadioButton = new javax.swing.JRadioButton();
        interLayerCoolingCheck = new javax.swing.JCheckBox();
        getWebPage = new javax.swing.JButton();
        expectedBuildTimeLabel = new javax.swing.JLabel();
        hoursMinutesLabel1 = new javax.swing.JLabel();
        expectedBuildTime = new javax.swing.JLabel();
        expectedFinishTimeLabel = new javax.swing.JLabel();
        expectedFinishTime = new javax.swing.JLabel();
        progressLabel = new javax.swing.JLabel();
        currentLayerOutOfN = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        printButton.setBackground(new java.awt.Color(51, 204, 0));
        printButton.setLabel("Print"); // NOI18N
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        pauseButton.setBackground(new java.awt.Color(255, 204, 0));
        pauseButton.setLabel("Pause"); // NOI18N
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        stopButton.setBackground(new java.awt.Color(255, 0, 0));
        stopButton.setFont(new java.awt.Font("Dialog", 1, 12));
        stopButton.setLabel("STOP !"); // NOI18N
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        exitButton.setLabel("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        layerPauseCheck.setText("Pause at end of layer"); // NOI18N
        layerPauseCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                layerPauseCheckActionPerformed(evt);
            }
        });

        buttonGroup1.add(buildRadioButton);
        buildRadioButton.setText("Build");
        buildRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buildRadioButtonMouseClicked(evt);
            }
        });

        buttonGroup1.add(simulateRadioButton);
        simulateRadioButton.setSelected(true);
        simulateRadioButton.setText("Simulate");
        simulateRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                simulateRadioButtonMousePressed(evt);
            }
        });

        interLayerCoolingCheck.setSelected(true);
        interLayerCoolingCheck.setText("Inter-layer cooling");
        interLayerCoolingCheck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                interLayerCoolingCheckMouseClicked(evt);
            }
        });

        getWebPage.setIcon(new javax.swing.ImageIcon("rr-logo-green-url.png")); // NOI18N
		getWebPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getWebPageActionPerformed(evt);
            }
        });

        expectedBuildTimeLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
        expectedBuildTimeLabel.setText("Expected build time:"); // NOI18N

        hoursMinutesLabel1.setFont(new java.awt.Font("Tahoma", 0, 12));
        hoursMinutesLabel1.setText("(h:m)"); // NOI18N

        expectedBuildTime.setFont(new java.awt.Font("Tahoma", 0, 12));
        expectedBuildTime.setText("00:00"); // NOI18N

        expectedFinishTimeLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
        expectedFinishTimeLabel.setText("Expected to finsh at:"); // NOI18N

        expectedFinishTime.setFont(new java.awt.Font("Tahoma", 0, 12));
        expectedFinishTime.setText("    -"); // NOI18N

        progressLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
        progressLabel.setText("Layer progress:"); // NOI18N

        currentLayerOutOfN.setFont(new java.awt.Font("Tahoma", 0, 12));
        currentLayerOutOfN.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        currentLayerOutOfN.setText("000/000"); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, exitButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, stopButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(pauseButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(printButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(buildRadioButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(interLayerCoolingCheck))
                            .add(simulateRadioButton)
                            .add(layerPauseCheck))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 326, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(11, 11, 11)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(expectedBuildTimeLabel)
                            .add(progressLabel)
                            .add(expectedFinishTimeLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(expectedFinishTime)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(getWebPage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 190, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(layout.createSequentialGroup()
                                        .add(currentLayerOutOfN)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 27, Short.MAX_VALUE)
                                        .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 421, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                .add(20, 20, 20))
                            .add(layout.createSequentialGroup()
                                .add(expectedBuildTime)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(hoursMinutesLabel1)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(printButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(buildRadioButton)
                                    .add(interLayerCoolingCheck))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(simulateRadioButton)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layerPauseCheck)
                            .add(pauseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(13, 13, 13)
                        .add(stopButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(getWebPage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(exitButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(27, 27, 27)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(expectedBuildTime)
                            .add(hoursMinutesLabel1)
                            .add(expectedBuildTimeLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(expectedFinishTime)
                            .add(expectedFinishTimeLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(progressLabel)
                            .add(currentLayerOutOfN)))
                    .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
    parentBotConsoleFrame.suspendPolling();
    org.reprap.Main.gui.onProduceB();
}//GEN-LAST:event_printButtonActionPerformed

public void pauseAction()
{
    paused = !paused;
    if(paused)
    {
    	pauseButton.setLabel("Pausing...");
    	org.reprap.Main.gui.pause();
        pauseButton.setLabel("Resume");
        parentBotConsoleFrame.resumePolling();
    } else
    {
    	org.reprap.Main.gui.resume();
        pauseButton.setLabel("Pause");
        parentBotConsoleFrame.suspendPolling();
    }   
}

private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
    pauseAction();
}//GEN-LAST:event_pauseButtonActionPerformed

private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
org.reprap.Main.gui.clickCancel();
}//GEN-LAST:event_stopButtonActionPerformed

private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
System.exit(0);
}//GEN-LAST:event_exitButtonActionPerformed

private void layerPauseCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_layerPauseCheckActionPerformed
org.reprap.Main.gui.setLayerPause(layerPauseCheck.isSelected());
}//GEN-LAST:event_layerPauseCheckActionPerformed

private void buildRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buildRadioButtonMouseClicked
	try
	{
		String geometry = Preferences.loadGlobalString("Geometry");

		if (geometry.compareToIgnoreCase("cartesian") == 0)
		{
			if (org.reprap.Main.getCommunicator() == null) {
				JOptionPane.showMessageDialog(null, "No Communicator. Restart with your device plugged in.");
				simulateRadioButton.setSelected(true);
			}
			else {
				try {
					org.reprap.Preferences.setGlobalString("Geometry", "cartesian");
				}
				catch (Exception e) {
					JOptionPane.showMessageDialog(null, "Could not set 'Geometry' preference to cartesian");
				}
			}
		}
		else if (geometry.compareToIgnoreCase("gcodewriter") == 0)
		{
			if(!Preferences.loadGlobalBool("GCodeUseSerial")) {
				JOptionPane.showMessageDialog(null, "G-codes are directed to a file, so you cannot control the machine directly.\n" 
						+ "To change this set the prefrence GCodeUseSerial to true.");
				simulateRadioButton.setSelected(true);
			}
		}
	} catch (Exception ex)
	{}
}//GEN-LAST:event_buildRadioButtonMouseClicked

private void simulateRadioButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_simulateRadioButtonMousePressed
try {
                org.reprap.Preferences.setGlobalString("Geometry", "nullcartesian");
            }
            catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Could not set 'Geometry' preference to nullcartesian");
            }
}//GEN-LAST:event_simulateRadioButtonMousePressed

private void interLayerCoolingCheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_interLayerCoolingCheckMouseClicked
try {
        org.reprap.Preferences.setGlobalBool("InterLayerCooling", interLayerCoolingCheck.isSelected());
//        System.out.println(Preferences.loadGlobalBool("InterLayerCooling"));
    }
    catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Could not set 'InterLayerCooling' preference flag");
    }
}//GEN-LAST:event_interLayerCoolingCheckMouseClicked

private void getWebPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getWebPageActionPerformed
try {
            URI url = new URI("http://reprap.org");
            //Desktop.getDesktop().browse(url);//***AB
        } catch(Exception e) {
            e.printStackTrace();
        }
}//GEN-LAST:event_getWebPageActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton buildRadioButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel currentLayerOutOfN;
    private java.awt.Button exitButton;
    private javax.swing.JLabel expectedBuildTime;
    private javax.swing.JLabel expectedBuildTimeLabel;
    private javax.swing.JLabel expectedFinishTime;
    private javax.swing.JLabel expectedFinishTimeLabel;
    private javax.swing.JButton getWebPage;
    private javax.swing.JLabel hoursMinutesLabel1;
    private javax.swing.JCheckBox interLayerCoolingCheck;
    private javax.swing.JCheckBox layerPauseCheck;
    private java.awt.Button pauseButton;
    private java.awt.Button printButton;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JRadioButton simulateRadioButton;
    private java.awt.Button stopButton;
    // End of variables declaration//GEN-END:variables

}
