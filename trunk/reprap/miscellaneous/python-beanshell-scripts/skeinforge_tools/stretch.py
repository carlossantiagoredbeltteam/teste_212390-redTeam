"""
Stretch is a script to stretch the threads to partially compensate for filament shrinkage when extruded.

The default 'Activate Stretch' checkbox is on.  When it is on, the functions described below will work, when it is off, the functions
will not be called.

The important value for the stretch preferences is "Maximum Stretch Over Half Extrusion Width (ratio)" which is the ratio of the
maximum amount the thread will be stretched compared to half of the extrusion width, the default is 0.3.  With a value of one or
more, the script might stretch a couple of threads in opposite directions so much that they overlap.  In theory this would be
because they'll contract back to the desired places, but in practice they might not.  The optimal value of stretch will be different
for different materials, so the default value of 0.3 is chosen because it will counter the contraction a bit, but not enough to
cause overlap trouble.

In general, stretch will widen holes and push corners out.  The algorithm works by checking at each turning point on the
extrusion path what the direction of the thread is at a distance of "Stretch from Distance over Extrusion Width (ratio)" times the
extrusion width, on both sides, and moves the thread in the opposite direction.  The magnitude of the stretch increases with the
amount that the direction of the two threads is similar and by the "Maximum Stretch Over Half Extrusion Width (ratio)".  The
script then also stretches the thread at two locations on the path on close to the turning points.  In practice the filament
contraction will be similar but different from the algorithm, so even once the optimal parameters are determined, the stretch
script will not be able to eliminate the inaccuracies caused by contraction, but it should reduce them.  To run stretch, in a shell
type:
> python stretch.py


The following examples stretch the files Hollow Square.gcode & Hollow Square.gts.  The examples are run in a terminal in the
folder which contains Hollow Square.gcode, Hollow Square.gts and stretch.py.  The stretch function will stretch if 'Maximum
Stretch Over Half Extrusion Width' is greater than zero, which can be set in the dialog or by changing the preferences file
'stretch.csv' with a text editor or a spreadsheet program set to separate tabs.  The functions writeOutput and
getStretchChainGcode check to see if the text has been stretched, if not they call the getRaftChainGcode in raft.py to raft the
text; once they have the rafted text, then they stretch.


> python stretch.py
This brings up the dialog, after clicking 'Stretch', the following is printed:
File Hollow Square.gts is being chain stretched.
The stretched file is saved as Hollow Square_stretch.gcode


> python
Python 2.5.1 (r251:54863, Sep 22 2007, 01:43:31)
[GCC 4.2.1 (SUSE Linux)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import stretch
>>> stretch.main()
This brings up the stretch dialog.


>>> stretch.writeOutput()
Hollow Square.gts
File Hollow Square.gts is being chain stretched.
The stretched file is saved as Hollow Square_stretch.gcode


>>> stretch.getStretchGcode("
( GCode generated by May 8, 2008 slice.py )
( Extruder Initialization )
..
many lines of gcode
..
")


>>> stretch.getStretchChainGcode("
( GCode generated by May 8, 2008 slice.py )
( Extruder Initialization )
..
many lines of gcode
..
")

"""

from __future__ import absolute_import
#Init has to be imported first because it has code to workaround the python bug where relative imports don't work if the module is imported as a main module.
import __init__

from skeinforge_tools.skeinforge_utilities.vec3 import vec3
from skeinforge_tools.skeinforge_utilities import euclidean
from skeinforge_tools.skeinforge_utilities import gcodec
from skeinforge_tools.skeinforge_utilities import intercircle
from skeinforge_tools.skeinforge_utilities import preferences
from skeinforge_tools import analyze
from skeinforge_tools import polyfile
from skeinforge_tools import raft
import cStringIO
import time


__author__ = "Enrique Perez (perez_enrique@yahoo.com)"
__date__ = "$Date: 2008/21/04 $"
__license__ = "GPL 3.0"


def getStretchChainGcode( gcodeText, stretchPreferences = None ):
	"Stretch a gcode linear move text.  Chain stretch the gcode if it is not already stretched."
	if not gcodec.isProcedureDone( gcodeText, 'raft' ):
		gcodeText = raft.getRaftChainGcode( gcodeText )
	return getStretchGcode( gcodeText, stretchPreferences )

def getStretchGcode( gcodeText, stretchPreferences = None ):
	"Stretch a gcode linear move text."
	if gcodeText == '':
		return ''
	if gcodec.isProcedureDone( gcodeText, 'stretch' ):
		return gcodeText
	if stretchPreferences == None:
		stretchPreferences = StretchPreferences()
		preferences.readPreferences( stretchPreferences )
	if not stretchPreferences.activateStretch.value:
		return gcodeText
	skein = StretchSkein()
	skein.parseGcode( gcodeText, stretchPreferences )
	return skein.output.getvalue()

def writeOutput( filename = '' ):
	"Stretch a gcode linear move file.  Chain stretch the gcode if it is not already stretched.  If no filename is specified, stretch the first unmodified gcode file in this folder."
	if filename == '':
		unmodified = gcodec.getGNUGcode()
		if len( unmodified ) == 0:
			print( "There are no unmodified gcode files in this folder." )
			return
		filename = unmodified[ 0 ]
	stretchPreferences = StretchPreferences()
	preferences.readPreferences( stretchPreferences )
	startTime = time.time()
	print( 'File ' + gcodec.getSummarizedFilename( filename ) + ' is being chain stretched.' )
	gcodeText = gcodec.getFileText( filename )
	if gcodeText == '':
		return
	suffixFilename = filename[ : filename.rfind( '.' ) ] + '_stretch.gcode'
	stretchGcode = getStretchChainGcode( gcodeText, stretchPreferences )
	gcodec.writeFileText( suffixFilename, stretchGcode )
	print( 'The stretched file is saved as ' + gcodec.getSummarizedFilename( suffixFilename ) )
	analyze.writeOutput( suffixFilename, stretchGcode )
	print( 'It took ' + str( int( round( time.time() - startTime ) ) ) + ' seconds to stretch the file.' )


class StretchSkein:
	"A class to stretch a skein of extrusions."
	def __init__( self ):
		self.bridgeExtrusionWidthOverSolid = 1.0
		self.decimalPlacesCarried = 3
		self.extruderActive = False
		self.feedrateMinute = 960.0
		self.halfExtrusionWidth = 0.2
		self.layer = None
		self.layers = []
		self.lineIndex = 0
		self.lines = None
		self.oldLocation = None
		self.output = cStringIO.StringIO()

	def addAlongWayLine( self, alongRatio, location ):
		"Add stretched gcode line, along the way from the old location to the location."
		oneMinusAlong = 1.0 - alongRatio
		alongWayLocation = self.oldLocation.times( alongRatio ).plus( location.times( oneMinusAlong ) )
		alongWayLine = self.getStretchedLineFromIndexLocation( self.lineIndex - 1, self.lineIndex, alongWayLocation )
		self.addLine( alongWayLine )

	def addLine( self, line ):
		"Add a line of text and a newline to the output."
		self.output.write( line + "\n" )

	def addStretchesBeforePoint( self, location ):
		"Get stretched gcode line."
		distanceToOld = location.distance( self.oldLocation )
		if distanceToOld == 0.0:
			print( 'This should never happen, stretch should never see two identical points in a row.' )
			print( location )
			return
		alongRatio = self.stretchFromDistance / distanceToOld
		if alongRatio > 0.7:
			return
		if alongRatio > 0.33333333333:
			alongRatio = 0.33333333333
		self.addAlongWayLine( 1.0 - alongRatio, location )
		self.addAlongWayLine( alongRatio, location )

	def getRelativeStretch( self, location, lineIndexRange ):
		"Get relative stretch for a location minus a point."
		locationComplex = location.dropAxis( 2 )
		lastLocationComplex = locationComplex
		oldTotalLength = 0.0
		pointComplex = locationComplex
		stretchRatio = 1.0
		totalLength = 0.0
		if not self.extruderActive:
			stretchRatio = self.stretchPreferences.travelOverExtrusionStretch.value
		for lineIndex in lineIndexRange:
			line = self.lines[ lineIndex ]
			splitLine = line.split( ' ' )
			firstWord = ''
			if len( splitLine ) > 0:
				firstWord = splitLine[ 0 ]
			if firstWord == 'G1':
				pointComplex = gcodec.getLocationFromSplitLine( self.oldLocation, splitLine ).dropAxis( 2 )
				locationMinusPoint = lastLocationComplex - pointComplex
				locationMinusPointLength = abs( locationMinusPoint )
				totalLength += locationMinusPointLength
				if totalLength >= self.stretchFromDistance:
					distanceFromRatio = ( self.stretchFromDistance - oldTotalLength ) / locationMinusPointLength
					totalPoint = distanceFromRatio * pointComplex + ( 1.0 - distanceFromRatio ) * lastLocationComplex
					locationMinusTotalPoint = locationComplex - totalPoint
					return stretchRatio * locationMinusTotalPoint / self.stretchFromDistance
				lastLocationComplex = pointComplex
				oldTotalLength = totalLength
			elif firstWord == 'M103':
				stretchRatio = self.stretchPreferences.travelOverExtrusionStretch.value
		locationMinusPoint = locationComplex - pointComplex
		locationMinusPointLength = abs( locationMinusPoint )
		if locationMinusPointLength > 0.0:
			return stretchRatio * locationMinusPoint / locationMinusPointLength
		return complex()

	def getRounded( self, number ):
		"Get number rounded to the number of carried decimal places as a string."
		return euclidean.getRoundedToDecimalPlaces( self.decimalPlacesCarried, number )

	def getStretchedLine( self, splitLine ):
		"Get stretched gcode line."
		location = gcodec.getLocationFromSplitLine( self.oldLocation, splitLine )
		self.feedrateMinute = gcodec.getFeedrateMinute( self.feedrateMinute, splitLine )
		if self.oldLocation != None:
			self.addStretchesBeforePoint( location )
		self.oldLocation = location
		return self.getStretchedLineFromIndexLocation( self.lineIndex - 1, self.lineIndex + 1, location )

	def getStretchedLineFromIndexLocation( self, indexPreviousStart, indexNextStart, location ):
		"Get stretched gcode line from line index and location."
		nextRange = range( indexNextStart, len( self.lines ) )
		previousRange = range( indexPreviousStart, 3, - 1 )
		relativeStretch = self.getRelativeStretch( location, nextRange ) + self.getRelativeStretch( location, previousRange )
		relativeStretch *= 0.8
		relativeStretchLength = abs( relativeStretch )
		if relativeStretchLength > 1.0:
			relativeStretch /= relativeStretchLength
		absoluteStretch = relativeStretch * self.maximumAbsoluteStretch
		stretchedLocation = location.plus( vec3( absoluteStretch.real, absoluteStretch.imag, 0.0 ) )
		feedrateString = self.getRounded( self.feedrateMinute )
		return "G1 X%s Y%s Z%s F%s" % ( self.getRounded( stretchedLocation.x ), self.getRounded( stretchedLocation.y ), self.getRounded( stretchedLocation.z ), feedrateString )

	def parseGcode( self, gcodeText, stretchPreferences ):
		"Parse gcode text and store the stretch gcode."
		self.lines = gcodec.getTextLines( gcodeText )
		self.stretchPreferences = stretchPreferences
		for self.lineIndex in range( len( self.lines ) ):
			line = self.lines[ self.lineIndex ]
			self.parseStretch( line )

	def parseStretch( self, line ):
		"Parse a gcode line and add it to the stretch skein."
		splitLine = line.split( ' ' )
		if len( splitLine ) < 1 or len( line ) < 1:
			return
		firstWord = splitLine[ 0 ]
		if firstWord == 'G1':
			line = self.getStretchedLine( splitLine )
		elif firstWord == 'M101':
			self.extruderActive = True
		elif firstWord == 'M103':
			self.extruderActive = False
		elif firstWord == '(<bridgeExtrusionWidthOverSolid>':
			self.bridgeExtrusionWidthOverSolid = float( splitLine[ 1 ] )
		elif firstWord == '(<bridgeLayer>':
			self.layerMaximumAbsoluteStretch = self.maximumAbsoluteStretch * self.bridgeExtrusionWidthOverSolid
			self.layerStretchFromDistance= self.stretchFromDistance * self.bridgeExtrusionWidthOverSolid
		elif firstWord == '(<decimalPlacesCarried>':
			self.decimalPlacesCarried = int( splitLine[ 1 ] )
		elif firstWord == '(<extrusionWidth>':
			extrusionWidth = float( splitLine[ 1 ] )
			self.halfExtrusionWidth = 0.5 * extrusionWidth
			self.maximumAbsoluteStretch = self.halfExtrusionWidth * self.stretchPreferences.stretchOverHalfExtrusionWidth.value
			self.stretchFromDistance = self.stretchPreferences.stretchFromDistanceOverExtrusionWidth.value * extrusionWidth
		elif firstWord == '(<layerStart>':
			self.layerMaximumAbsoluteStretch = self.maximumAbsoluteStretch
			self.layerStretchFromDistance = self.stretchFromDistance
		elif firstWord == '(<extrusionStart>':
			self.addLine( '(<procedureDone> stretch )' )
		self.addLine( line )


class StretchPreferences:
	"A class to handle the stretch preferences."
	def __init__( self ):
		"Set the default preferences, execute title & preferences filename."
		#Set the default preferences.
		self.archive = []
		self.activateStretch = preferences.BooleanPreference().getFromValue( 'Activate Stretch', True )
		self.archive.append( self.activateStretch )
		self.filenameInput = preferences.Filename().getFromFilename( [ ( 'GNU Triangulated Surface text files', '*.gts' ), ( 'Gcode text files', '*.gcode' ) ], 'Open File to be Stretched', '' )
		self.archive.append( self.filenameInput )
		self.stretchFromDistanceOverExtrusionWidth = preferences.FloatPreference().getFromValue( 'Stretch From Distance Over Extrusion Width (ratio):', 2.0 )
		self.archive.append( self.stretchFromDistanceOverExtrusionWidth )
		self.stretchOverHalfExtrusionWidth = preferences.FloatPreference().getFromValue( 'Maximum Stretch Over Half Extrusion Width (ratio):', 0.3 )
		self.archive.append( self.stretchOverHalfExtrusionWidth )
		self.travelOverExtrusionStretch = preferences.FloatPreference().getFromValue( 'Travel Stretch Over Extrusion Stretch (ratio):', 0.2 )
		self.archive.append( self.travelOverExtrusionStretch )
		#Create the archive, title of the execute button, title of the dialog & preferences filename.
		self.executeTitle = 'Stretch'
		self.filenamePreferences = preferences.getPreferencesFilePath( 'stretch.csv' )
		self.filenameHelp = 'skeinforge_tools.stretch.html'
		self.saveTitle = 'Save Preferences'
		self.title = 'Stretch Preferences'

	def execute( self ):
		"Stretch button has been clicked."
		filenames = polyfile.getFileOrGNUUnmodifiedGcodeDirectory( self.filenameInput.value, self.filenameInput.wasCancelled )
		for filename in filenames:
			writeOutput( filename )


def main( hashtable = None ):
	"Display the stretch dialog."
	preferences.displayDialog( StretchPreferences() )

if __name__ == "__main__":
	main()
