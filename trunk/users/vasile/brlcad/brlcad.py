warning = '## This file generated by brlcad.py.  It might get clobbered.'
copyright = '## Copyright (C) 2008 James Vasile <james@hackervisions.org>'
license = '''## This is a freed work; you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## any later version.

## This is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.  You should have received a copy of the
## GNU General Public License along with the work; if not, write
## to the Free Software Foundation, Inc., 51 Franklin Street, 5th
## Floor, Boston, MA 02110-1301 USA '''

import sys, os

class Vector:
    def __init__(self,*args):
        if len(args) == 1:
            self.v = args[0]
        else:
            self.v = args
    def __str__(self):
        return "%s"%(" ".join([str(x)for x in self.v]))
    def __repr__(self):
        return "Vector(%s)"%self.v
    def __mul__(self,other):
        return Vector( [r*other for r in self.v] )
    def __rmul__(self,other):
        return Vector( [r*other for r in self.v] )


unique_names={}
def unique_name(stub, suffix):
    global unique_names
    full = stub + suffix
    if not full in unique_names:
        unique_names[full]=0
    unique_names[full] += 1
    return stub + '.' + str(unique_names[full]) + suffix

def build_name(stub, suffix, **kwargs):
    if 'suffix' in kwargs:
        suffix = kwargs['suffix']
    if suffix: suffix = '.' + suffix

    if 'name' in kwargs:
        if 'unique_name' in kwargs and kwargs['unique_name']==False:
            return kwargs['name'] + suffix
        else:
            return unique_name(kwargs['name'], suffix)
    else:
        return unique_name(stub, suffix)

class Statement:
    def __init__(self, statement, args=[]):
        args = list(args)
        for i in range(len(args)):
            if type(args[i]) == tuple or type(args[i]) == list:
                args[i] = Vector(args[i])
        self.args = args
        self.statement = statement

    def __str__(self):
        return '%s %s' % (self.statement, ' '.join([str(s) for s in self.args]))

class Script():
    '''A script is just a list of statements to send to mged.
    TODO: Maybe this class should derive from list?'''

    def __init__(self, *statements):
        self.statements = list(statements)
        self.index = len(statements)
    def __str__(self):
        return ''.join(['%s\n' % (s) for s in self.statements])

    def __iter__(self):
        return self
    def next(self):
        if self.index == len(statements):
            raise StopIteration
        self.index = self.index + 1
        return self.statements[self.index]

    def append(self, *statements):
        for i in statements:
            self.statements.append(i)
        return self

class Shape(Statement):
    def __init__(self, shape, args=[], **kwargs):
        "Primitive shapes"
        self.name = build_name(shape, 's', **kwargs)
        Statement.__init__(self,'in %s %s' % (self.name, shape),args)

class Region(Statement):
    def __init__(self, region_command, **kwargs):
        self.name = build_name('region', 'r', **kwargs)
        Statement.__init__(self,"r", (self.name, region_command))

class Group(Statement):
    '''*shapes is a list of objects or object names to be added to the
    group.  This class respects all the Statement keyword arguments,
    such as name, suffix and unique_name.'''
    def __init__(self, *shapes, **kwargs):
        shapes = list(shapes)
        self.name = build_name('group', 'g', **kwargs)
        for i in range(len(shapes)):
            if not isinstance(shapes[i], basestring):
                shapes[i] = shapes[i].name
        Statement.__init__(self, 'g', (self.name, ' '.join(shapes)))

class Comment(Statement):
    def __init__(self, comment):
        Statement.__init__(self,"\n##", (comment,))

class Sed(Statement):
    ## Enter editing mode
    pass

class Title(Statement):
    ## TODO: escape quotes
    def __init__(self, title, args=[]):
        Statement.__init__(self,"title", (title,))

class Units(Statement):
    def __init__(self, units):
        good_units = ['mm', 'millimeter', 'cm', 'centimeter', 'm', 'meter', 'in',
                      'inch', 'ft', 'foot', 'feet', 'um', 'angstrom',
                      'decinanometer', 'nanometer', 'nm', 'micron', 'micrometer', 
                      'km', 'kilometer', 'cubit', 'yd', 'yard', 'rd', 'rod', 'mi',
                      'mile']
        if not units in good_units:
            sys.stdout.write('Unknown units!  Ignoring units statement.  Defaulting to mm.\n')
            units = 'mm'
        Statement.__init__(self,"units", (units,))

class Cone(Shape):
    def __init__(self, vertex, height_vector, base_radius, top_radius, **kwargs):
        Shape.__init__(self, "trc", (vertex, height_vector, base_radius, top_radius), **kwargs)

class Cylinder(Shape):
    def __init__(self, vertex, height_vector, radius, **kwargs):
        Shape.__init__(self, "rcc", (vertex, height_vector, radius), **kwargs)

class Box(Shape):
    def __init__(self, xmin, xmax, ymin, ymax, zmin, zmax, **kwargs):
        Shape.__init__(self, "rpp", (xmin, xmax, ymin, ymax, zmin, zmax), **kwargs)

#class Box_rounded_edge_corners(Script):
#    def __init__(self, vertex, height
