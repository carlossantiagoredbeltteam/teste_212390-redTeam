"""
Export is a script to pick an export plugin and optionally print the output to a file.

Export presents the user with a choice of the export plugins in the export_plugins folder.  The chosen plugin will then modify the
gcode or translate it into another format.  There is also the "Do Not Change Output" choice, which will not change the output.

To print the output to a file, add the file output name to the "Also Send Output To" field.  A common choice is sys.stdout to print
the output in the shell screen.  Another common choice is sys.stderr.  The default is nothing, in which case the output will not be
printed to a file.

If the "Delete M110 Gcode Line" checkbox is true, export will delete the M110 gcode line, whose only purpose is to indicate that
the gcode is generated by skeinforge.  The M110 gcode is not necessary to run a fabricator.

An export plugin is a script in the export_plugins folder which has the functions getOuput and writeOutput.

To run export, in a shell type:
> python export.py

For export to run, install python 2.x on your machine, which is avaliable from http://www.python.org/download/

To use the preferences dialog you'll also need Tkinter, which probably came with the python installation.  If it did not, look for it at:
www.tcl.tk/software/tcltk/

To export a GNU Triangulated Surface file from Art of Illusion, you can use the Export GNU Triangulated Surface script at:
http://members.axion.net/~enrique/Export%20GNU%20Triangulated%20Surface.bsh

To bring it into Art of Illusion, drop it into the folder ArtOfIllusion/Scripts/Tools/.

The GNU Triangulated Surface format is supported by Mesh Viewer, and it is described at:
http://gts.sourceforge.net/reference/gts-surfaces.html#GTS-SURFACE-WRITE

To turn an STL file into filled, exported gcode, first import the file using the STL import plugin in the import submenu of the file menu
of Art of Illusion.  Then from the Scripts submenu in the Tools menu, choose Export GNU Triangulated Surface and select the
imported STL shape.  Then type 'python slice.py' in a shell in the folder which slice & export are in and when the dialog pops up, set
the parameters and click 'Save Preferences'.  Then type 'python fill.py' in a shell in the folder which fill is in and when the dialog
pops up, set the parameters and click 'Save Preferences'.  Then type 'python raft.py' in a shell in the folder which fill is in and when
the dialog pops up, set the parameters and click 'Save Preferences'.  Then if you wish you can change the preferences in tower,
comb, stretch, fillet, but their defaults do little or nothing and are safe.  Then type 'python export.py' in a shell and when the dialog
pops up, change the parameters if you wish but the default 'GCode Only' is fine.  Then click 'Export', choose the file which you
exported in Export GNU Triangulated Surface and the filled & exported file will be saved with the suffix '_export'.

To write documentation for this program, open a shell in the export.py directory, then type 'pydoc -w export', then open 'export.html' in
a browser or click on the '?' button in the dialog.  To write documentation for all the python scripts in the directory, type 'pydoc -w ./'.
To use other functions of export, type 'python' in a shell to run the python interpreter, then type 'import export' to import this program.

The following examples export the files Hollow Square.gts.  The examples are run in a terminal in the folder which contains
Hollow Square.gts & export.py.  The function exportChainFile checks to see if the text has been exported, if not they call
getFilletChainGcode in fillet.py to fillet the text; once they have the filleted text, then it exports.


> pydoc -w export
wrote export.html


> python export.py
This brings up the dialog, after clicking 'Export', the following is printed:
File Hollow Square.gts is being chain exported.
The exported file is saved as Hollow Square_export.gcode


>python
Python 2.5.1 (r251:54863, Sep 22 2007, 01:43:31)
[GCC 4.2.1 (SUSE Linux)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import export
>>> export.main()
This brings up the export dialog.


>>> export.exportChainFile()
Hollow Square.gts
File Hollow Square.gts is being chain exported.
The exported file is saved as Hollow Square_export.gcode

"""

from skeinforge_utilities import euclidean
from skeinforge_utilities import gcodec
from skeinforge_utilities import intercircle
from skeinforge_utilities import preferences
from skeinforge_utilities.vec3 import vec3
import cStringIO
import fillet
import multifile
import os
import sys
import time
import vectorwrite


__author__ = "Enrique Perez (perez_enrique@yahoo.com)"
__date__ = "$Date: 2008/21/04 $"
__license__ = "GPL 3.0"


def compareRadio( first, second ):
	"Determine whether the first is less than, greater than or equal to the second."
	firstLower = first.name.lower()
	secondLower = second.name.lower()
	if firstLower < secondLower:
		return - 1
	if firstLower > secondLower:
		return 1
	return 0

def exportChainFile( filename = '' ):
	"""Export a gcode linear move file.  Chain export the gcode if it is not already exported.
	If no filename is specified, export the first unmodified gcode file in this folder."""
	if filename == '':
		unmodified = gcodec.getGNUGcode()
		if len( unmodified ) == 0:
			print( "There are no unmodified gcode files in this folder." )
			return
		filename = unmodified[ 0 ]
	exportPreferences = ExportPreferences()
	preferences.readPreferences( exportPreferences )
	startTime = time.time()
	print( 'File ' + gcodec.getSummarizedFilename( filename ) + ' is being chain exported.' )
	gcodeText = gcodec.getFileText( filename )
	if gcodeText == '':
		return
	suffixFilename = filename[ : filename.rfind( '.' ) ] + '_export.gcode'
	if not gcodec.isProcedureDone( gcodeText, 'fillet' ):
		gcodeText = fillet.getFilletChainGcode( gcodeText )
	vectorwrite.writeSkeinforgeVectorFile( suffixFilename, gcodeText )
	exportChainGcode = getExportGcode( gcodeText, exportPreferences )
	pluginModule = None
	selectedPlugin = getSelectedPlugin( exportPreferences )
	if selectedPlugin != None:
		pluginsModule = __import__( 'export_plugins', globals(), locals(), [ selectedPlugin.name ] )
		pluginModule = pluginsModule.__dict__[ selectedPlugin.name ]
		exportChainGcode = pluginModule.getOutput( exportChainGcode )
	if exportPreferences.alsoSendOutputTo.value != '':
		exec( 'print >> ' + exportPreferences.alsoSendOutputTo.value + ', exportChainGcode' )
	if selectedPlugin == None:
		gcodec.writeFileText( suffixFilename, exportChainGcode )
		print( 'The exported file is saved as ' + gcodec.getSummarizedFilename( suffixFilename ) )
	else:
		pluginModule.writeOutput( suffixFilename, exportChainGcode )
	print( 'It took ' + str( int( round( time.time() - startTime ) ) ) + ' seconds to export the file.' )

def getExportGcode( gcodeText, exportPreferences = None ):
	"Export a gcode linear move text."
	if gcodeText == '':
		return ''
	if gcodec.isProcedureDone( gcodeText, 'export' ):
		return gcodeText
	if exportPreferences == None:
		exportPreferences = ExportPreferences()
		preferences.readPreferences( exportPreferences )
	skein = ExportSkein()
	skein.parseGcode( exportPreferences, gcodeText )
	return skein.output.getvalue()

def getPluginFilenames():
	"Get the filenames of the python plugins in the export_plugins folder."
	pluginsFolderName = os.path.join( os.path.dirname( __file__ ), 'export_plugins' )
	fileInDirectory = os.path.join( pluginsFolderName, '__init__.py' )
	fullPluginFilenames = gcodec.getPythonFilenameExceptInit( fileInDirectory )
	pluginFilenames = []
	for fullPluginFilename in fullPluginFilenames:
		pluginBasename = os.path.basename( fullPluginFilename )
		pluginBasename = pluginBasename[ : pluginBasename.rfind( '.py' ) ]
		pluginFilenames.append( pluginBasename )
	return pluginFilenames

def getSelectedPlugin( exportPreferences ):
	"Get the selected plugin."
	for plugin in exportPreferences.exportPlugins:
		if plugin.value:
			return plugin
	return None

class ExportSkein:
	"A class to export a skein of extrusions."
	def __init__( self ):
		self.output = cStringIO.StringIO()

	def parseGcode( self, exportPreferences, gcodeText ):
		"Parse gcode text and store the export gcode."
		lines = gcodec.getTextLines( gcodeText )
		for line in lines:
			self.parseLine( line, exportPreferences.deleteM110GcodeLine.value )

	def parseLine( self, line, removeM110GcodeLine ):
		"Parse a gcode line."
		splitLine = line.split( ' ' )
		if len( splitLine ) < 1:
			return
		firstWord = splitLine[ 0 ]
		if firstWord != 'M110' or not removeM110GcodeLine:
			self.output.write( line + "\n" )


class ExportPreferences:
#only gcode doc
#small gcode
#precision
	"A class to handle the export preferences."
	def __init__( self ):
		"Set the default preferences, execute title & preferences filename."
		#Set the default preferences.
		self.alsoSendOutputTo = preferences.StringPreference().getFromValue( 'Also Send Output To:', '' )
		self.deleteM110GcodeLine = preferences.BooleanPreference().getFromValue( 'Delete M110 Gcode Line', True )
		exportPluginFilenames = getPluginFilenames()
		self.exportLabel = preferences.LabelDisplay().getFromName( 'Export Operations: ' )
		self.exportOperations = []
		self.exportPlugins = []
		exportRadio = []
		self.doNotChangeOutput = preferences.RadioCapitalized().getFromRadio( 'Do Not Change Output', exportRadio, True )
		for exportPluginFilename in exportPluginFilenames:
			exportPlugin = preferences.RadioCapitalized().getFromRadio( exportPluginFilename, exportRadio, False )
			if exportPluginFilename == 'gcode_only':
				self.doNotChangeOutput.value = False
				exportPlugin.value = True
			self.exportPlugins.append( exportPlugin )
		self.exportOperations = [ self.doNotChangeOutput ]
		self.exportOperations += self.exportPlugins
		self.exportOperations.sort( compareRadio )
		self.filenameInput = preferences.Filename().getFromFilename( [ ( 'GNU Triangulated Surface text files', '*.gts' ), ( 'Gcode text files', '*.gcode' ) ], 'Open File to be Exported', '' )
		#Create the archive, title of the execute button, title of the dialog & preferences filename.
		self.archive = [ self.alsoSendOutputTo, self.deleteM110GcodeLine, self.exportLabel ] + self.exportOperations + [ self.filenameInput ]
		self.executeTitle = 'Export'
		self.filenamePreferences = preferences.getPreferencesFilePath( 'export.csv' )
		self.filenameHelp = 'export.html'
		self.title = 'Export Preferences'

	def execute( self ):
		"Export button has been clicked."
		filenames = multifile.getFileOrGNUUnmodifiedGcodeDirectory( self.filenameInput.value, self.filenameInput.wasCancelled )
		for filename in filenames:
			exportChainFile( filename )


def main( hashtable = None ):
	"Display the export dialog."
	preferences.displayDialog( ExportPreferences() )

if __name__ == "__main__":
	main()
