"""
Oozebane is a script to turn off the extruder before the end of a thread.

The default 'Activate Oozebane' checkbox is on.  When it is on, the functions described below will work, when it is off, the functions
will not be called.

The important value for the oozebane preferences is "Early Shutdown Distance Over Extrusion Width (ratio)" which is the ratio of the
distance before the end of the thread that the extruder will be turned off over the extrusion width, the default is 2.0.  A higher ratio
means the extruder will turn off sooner and the end of the line will be thinner.

When oozebane turns the extruder off, it slows the feedrate down in steps so in theory the thread will remain at roughly the same
thickness until the end.  The "Turn Off Steps" preference is the number of steps, the more steps the smaller the size of the step that
the feedrate will be decreased and the larger the size of the resulting gcode file, the default is 3.

To run oozebane, in a shell which oozebane is in type:
> python oozebane.py

The following examples oozebane the files Hollow Square.gcode & Hollow Square.gts.  The examples are run in a terminal in the
folder which contains Hollow Square.gcode, Hollow Square.gts and oozebane.py.  The oozebane function will oozebane if the
'Activate Oozebane' checkbox is on.  The functions writeOutput and getOozebaneChainGcode check to see if the text has been
oozebaned, if not they call the getNozzleWipeChainGcode in nozzle_wipe.py to nozzle wipe the text; once they have the nozzle
wiped text, then they oozebane.


> python oozebane.py
This brings up the dialog, after clicking 'Oozebane', the following is printed:
File Hollow Square.gts is being chain oozebaned.
The oozebaned file is saved as Hollow Square_oozebane.gcode


> python oozebane.py Hollow Square.gts
File Hollow Square.gts is being chain oozebaned.
The oozebaned file is saved as Hollow Square_oozebane.gcode


> python
Python 2.5.1 (r251:54863, Sep 22 2007, 01:43:31)
[GCC 4.2.1 (SUSE Linux)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import oozebane
>>> oozebane.main()
This brings up the oozebane dialog.


>>> oozebane.writeOutput()
File Hollow Square.gts is being chain oozebaned.
The oozebaned file is saved as Hollow Square_oozebane.gcode


>>> oozebane.getOozebaneGcode("
( GCode generated by May 8, 2008 slice.py )
( Extruder Initialization )
..
many lines of gcode
..
")


>>> oozebane.getOozebaneChainGcode("
( GCode generated by May 8, 2008 slice.py )
( Extruder Initialization )
..
many lines of gcode
..
")

"""

from __future__ import absolute_import
#Init has to be imported first because it has code to workaround the python bug where relative imports don't work if the module is imported as a main module.
import __init__

from skeinforge_tools.skeinforge_utilities import euclidean
from skeinforge_tools.skeinforge_utilities import gcodec
from skeinforge_tools.skeinforge_utilities import preferences
from skeinforge_tools import analyze
from skeinforge_tools import import_translator
from skeinforge_tools import nozzle_wipe
from skeinforge_tools import polyfile
import cStringIO
import math
import sys
import time


__author__ = "Enrique Perez (perez_enrique@yahoo.com)"
__date__ = "$Date: 2008/21/04 $"
__license__ = "GPL 3.0"


def getOozebaneChainGcode( filename, gcodeText, oozebanePreferences = None ):
	"Oozebane a gcode linear move text.  Chain oozebane the gcode if it is not already oozebaned."
	gcodeText = gcodec.getGcodeFileText( filename, gcodeText )
	if not gcodec.isProcedureDone( gcodeText, 'nozzle_wipe' ):
		gcodeText = nozzle_wipe.getNozzleWipeChainGcode( filename, gcodeText )
	return getOozebaneGcode( gcodeText, oozebanePreferences )

def getOozebaneGcode( gcodeText, oozebanePreferences = None ):
	"Oozebane a gcode linear move text."
	if gcodeText == '':
		return ''
	if gcodec.isProcedureDone( gcodeText, 'oozebane' ):
		return gcodeText
	if oozebanePreferences == None:
		oozebanePreferences = OozebanePreferences()
		preferences.readPreferences( oozebanePreferences )
	if not oozebanePreferences.activateOozebane.value:
		return gcodeText
	skein = OozebaneSkein()
	skein.parseGcode( gcodeText, oozebanePreferences )
	return skein.output.getvalue()

def writeOutput( filename = '' ):
	"Oozebane a gcode linear move file.  Chain oozebane the gcode if it is not already oozebaned. If no filename is specified, oozebane the first unmodified gcode file in this folder."
	if filename == '':
		unmodified = import_translator.getGNUTranslatorFilesUnmodified()
		if len( unmodified ) == 0:
			print( "There are no unmodified gcode files in this folder." )
			return
		filename = unmodified[ 0 ]
	oozebanePreferences = OozebanePreferences()
	preferences.readPreferences( oozebanePreferences )
	startTime = time.time()
	print( 'File ' + gcodec.getSummarizedFilename( filename ) + ' is being chain oozebaned.' )
	suffixFilename = filename[ : filename.rfind( '.' ) ] + '_oozebane.gcode'
	oozebaneGcode = getOozebaneChainGcode( filename, '', oozebanePreferences )
	if oozebaneGcode == '':
		return
	gcodec.writeFileText( suffixFilename, oozebaneGcode )
	print( 'The oozebaned file is saved as ' + gcodec.getSummarizedFilename( suffixFilename ) )
	analyze.writeOutput( suffixFilename, oozebaneGcode )
	print( 'It took ' + str( int( round( time.time() - startTime ) ) ) + ' seconds to oozebane the file.' )


class OozebaneSkein:
	"A class to oozebane a skein of extrusions."
	def __init__( self ):
		self.decimalPlacesCarried = 3
		self.earlyShutdownDistances = []
		self.earlyShutdownFlowRates = []
		self.extruderActiveLongEnough = False
		self.feedrateMinute = 960.0
		self.isShutdownEarly = True
		self.lineIndex = 0
		self.lines = None
		self.oldLocation = None
		self.output = cStringIO.StringIO()
		self.stepIndex = 0

	def addLine( self, line ):
		"Add a line of text and a newline to the output."
		self.output.write( line + "\n" )

	def addShutSlowDownLine( self, line ):
		"Add the shutdown and slowdown lines."
		distanceThreadEnd = self.getDistanceThreadEnd()
		splitLine = line.split( ' ' )
		location = gcodec.getLocationFromSplitLine( self.oldLocation, splitLine )
		segment = self.oldLocation.minus( location )
		segmentLength = segment.length()
		distanceBack = self.earlyShutdownDistances[ self.stepIndex ] - distanceThreadEnd
		if segmentLength > 0.0:
			locationBack = location.minus( segment.times( distanceBack / segmentLength ) )
			feedrate = self.feedrateMinute * self.earlyShutdownFlowRates[ self.stepIndex ]
			if not self.isClose( locationBack, self.oldLocation ) and not self.isClose( locationBack, location ):
				self.addLine( self.getLinearMoveWithFeedrate( feedrate, locationBack ) )
		if self.stepIndex == 0:
			self.addLine( 'M103' )
			self.isShutdownEarly = True
		self.stepIndex += 1

	def getAddShutSlowDownLines( self, line ):
		"Get and / or add the shutdown and slowdown lines."
		distanceThreadEnd = self.getDistanceThreadEnd()
		while self.getDistanceThreadEnd() != None:
			self.addShutSlowDownLine( line )
		if distanceThreadEnd != None:
			if distanceThreadEnd > 0.0:
				splitLine = line.split( ' ' )
				location = gcodec.getLocationFromSplitLine( self.oldLocation, splitLine )
				return self.getLinearMoveWithFeedrate( self.feedrateMinute * distanceThreadEnd / self.earlyShutdownDistance, location )
		return line

	def getDistanceThreadEnd( self ):
		"Get the distance to the end of the thread."
		if self.stepIndex >= self.turnOffSteps:
			return None
		remainingDistance = self.earlyShutdownDistances[ self.stepIndex ]
		line = self.lines[ self.lineIndex ]
		splitLine = line.split( ' ' )
		lastThreadLocation = gcodec.getLocationFromSplitLine( self.oldLocation, splitLine )
		totalDistance = 0.0
		for afterIndex in range( self.lineIndex + 1, len( self.lines ) ):
			line = self.lines[ afterIndex ]
			splitLine = line.split( ' ' )
			firstWord = "";
			if len( splitLine ) > 0:
				firstWord = splitLine[ 0 ]
			if firstWord == 'G1':
				location = gcodec.getLocationFromSplitLine( lastThreadLocation, splitLine )
				distance = location.distance( lastThreadLocation )
				totalDistance += distance
				lastThreadLocation = location
				if totalDistance >= remainingDistance:
					return None
			if firstWord == 'M103':
				return totalDistance
		return None

	def getLinearMoveWithFeedrate( self, feedrate, location ):
		"Get a linear move line with the feedrate."
		return 'G1 X%s Y%s Z%s F%s' % ( self.getRounded( location.x ), self.getRounded( location.y ), self.getRounded( location.z ), self.getRounded( feedrate ) )

	def getOozebaneLine( self, line ):
		"Get oozebaned gcode line."
		splitLine = line.split( ' ' )
		indexOfF = gcodec.indexOfStartingWithSecond( "F", splitLine )
		if indexOfF > 0:
			self.feedrateMinute = float( splitLine[ indexOfF ][ 1 : ] )
		if self.oldLocation == None:
			return line
		if self.extruderActiveLongEnough:
			return self.getAddShutSlowDownLines( line )
		return line

	def getRounded( self, number ):
		"Get number rounded to the number of carried decimal places as a string."
		return euclidean.getRoundedToDecimalPlaces( self.decimalPlacesCarried, number )

	def isClose( self, locationFirst, locationSecond ):
		"Determine if the first location is close to the second location."
		return locationFirst.distance2( locationSecond ) < self.closeSquared

	def parseGcode( self, gcodeText, oozebanePreferences ):
		"Parse gcode text and store the oozebane gcode."
		self.lines = gcodec.getTextLines( gcodeText )
		self.parseInitialization( oozebanePreferences )
		for self.lineIndex in range( self.lineIndex, len( self.lines ) ):
			line = self.lines[ self.lineIndex ]
			self.parseLine( line )

	def parseInitialization( self, oozebanePreferences ):
		"Parse gcode initialization and store the parameters."
		for self.lineIndex in range( len( self.lines ) ):
			line = self.lines[ self.lineIndex ]
			splitLine = line.split()
			firstWord = ''
			if len( splitLine ) > 0:
				firstWord = splitLine[ 0 ]
			if firstWord == '(<extrusionWidth>':
				self.extrusionWidth = float( splitLine[ 1 ] )
				self.closeSquared = 0.01 * self.extrusionWidth * self.extrusionWidth
				self.setExtrusionWidth( oozebanePreferences )
			elif firstWord == '(<decimalPlacesCarried>':
				self.decimalPlacesCarried = int( splitLine[ 1 ] )
			elif firstWord == '(<extrusionStart>':
				self.addLine( '(<procedureDone> oozebane )' )
				return
			self.addLine( line )

	def parseLine( self, line ):
		"Parse a gcode line and add it to the bevel gcode."
		splitLine = line.split()
		if len( splitLine ) < 1:
			return
		firstWord = splitLine[ 0 ]
		if firstWord == 'G1':
			line = self.getOozebaneLine( line )
			self.oldLocation = gcodec.getLocationFromSplitLine( self.oldLocation, splitLine )
		if firstWord == 'M101':
			if self.getDistanceThreadEnd() == None:
				self.extruderActiveLongEnough = True
		if firstWord == 'M103':
			self.extruderActiveLongEnough = False
			self.stepIndex = 0
			if self.isShutdownEarly:
				self.isShutdownEarly = False
				return
		self.addLine( line )

	def setExtrusionWidth( self, oozebanePreferences ):
		"Parse gcode initialization and store the parameters."
		self.turnOffSteps = max( 1, oozebanePreferences.turnOffSteps.value )
		self.earlyShutdownDistance = oozebanePreferences.earlyShutdownDistanceOverExtrusionWidth.value * self.extrusionWidth
		for stepIndex in range( self.turnOffSteps ):
			downMiddleWay = 1.0 - ( 0.5 + stepIndex ) / float( self.turnOffSteps )
			downWay = 1.0 - stepIndex / float( self.turnOffSteps )
			self.earlyShutdownFlowRates.append( downMiddleWay )
			self.earlyShutdownDistances.append( downWay * self.earlyShutdownDistance )


class OozebanePreferences:
	"A class to handle the oozebane preferences."
	def __init__( self ):
		"Set the default preferences, execute title & preferences filename."
		#Set the default preferences.
		self.archive = []
		self.activateOozebane = preferences.BooleanPreference().getFromValue( 'Activate Oozebane', True )
		self.archive.append( self.activateOozebane )
		self.earlyShutdownDistanceOverExtrusionWidth = preferences.FloatPreference().getFromValue( 'Early Shutdown Distance Over Extrusion Width (ratio):', 2.0 )
		self.archive.append( self.earlyShutdownDistanceOverExtrusionWidth )
		self.filenameInput = preferences.Filename().getFromFilename( import_translator.getGNUTranslatorGcodeFileTypeTuples(), 'Open File to be Oozebaneped', '' )
		self.archive.append( self.filenameInput )
		self.turnOffSteps = preferences.IntPreference().getFromValue( 'Turn Off Steps (positive integer):', 3 )
		self.archive.append( self.turnOffSteps )
		#Create the archive, title of the execute button, title of the dialog & preferences filename.
		self.executeTitle = 'Oozebane'
		self.filenamePreferences = preferences.getPreferencesFilePath( 'oozebane.csv' )
		self.filenameHelp = 'skeinforge_tools.oozebane.html'
		self.saveTitle = 'Save Preferences'
		self.title = 'Oozebane Preferences'

	def execute( self ):
		"Oozebane button has been clicked."
		filenames = polyfile.getFileOrDirectoryTypesUnmodifiedGcode( self.filenameInput.value, import_translator.getGNUTranslatorFileTypes(), self.filenameInput.wasCancelled )
		for filename in filenames:
			writeOutput( filename )


def main( hashtable = None ):
	"Display the oozebane dialog."
	if len( sys.argv ) > 1:
		writeOutput( ' '.join( sys.argv[ 1 : ] ) )
	else:
		preferences.displayDialog( OozebanePreferences() )

if __name__ == "__main__":
	main()
