"""
Speed is a script to set the feedrate, and flowrate.

The default 'Activate Speed' checkbox is on.  When it is on, the functions described below will work, when it is off, the
functions will not be called.  The speed script sets the feedrate, and flowrate.  To run speed, in a shell type:
> python speed.py

The feedrate for the shape will be set to the 'Feedrate" preference.  The speed of the orbit compared to the operating extruder
speed will be set to the "Orbital Feedrate over Operating Feedrate" preference.  If you want the orbit to be very short, set the
"Orbital Feedrate over Operating Feedrate" preference to a low value like 0.1.

In the "Flowrate Choice" radio button group, if "Do Not Add Flowrate" is selected then speed will not add a flowrate to the gcode
output.  If "Metric" is selected, the flowrate in cubic millimeters per second will be added to the output.  If "PWM Setting" is
selected, the value in the "Flowrate PWM Setting" field will be added to the output.

The following examples speed the files Hollow Square.gcode & Hollow Square.gts.  The examples are run in a terminal in the
folder which contains Hollow Square.gcode, Hollow Square.gts and speed.py.  The speed function will speed if "Activate
Speed" is true, which can be set in the dialog or by changing the preferences file 'speed.csv' with a text editor or a spreadsheet
program set to separate tabs.  The functions writeOutput and getSpeedChainGcode check to see if the text has been speeded,
if not they call getFillChainGcode in fill.py to get filled gcode; once they have the filled text, then they speed.


> python speed.py
This brings up the dialog, after clicking 'Speed', the following is printed:
File Hollow Square.gts is being chain speeded.
The speeded file is saved as Hollow Square_speed.gcode


>python
Python 2.5.1 (r251:54863, Sep 22 2007, 01:43:31)
[GCC 4.2.1 (SUSE Linux)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import speed
>>> speed.main()
This brings up the speed dialog.


>>> speed.writeOutput()
Hollow Square.gts
File Hollow Square.gts is being chain speeded.
The speeded file is saved as Hollow Square_speed.gcode


>>> speed.getSpeedGcode("
( GCode generated by May 8, 2008 slice.py )
( Extruder Initialization )
..
many lines of gcode
..
")


>>> speed.getSpeedChainGcode("
( GCode generated by May 8, 2008 slice.py )
( Extruder Initialization )
..
many lines of gcode
..
")

"""

from __future__ import absolute_import
#Init has to be imported first because it has code to workaround the python bug where relative imports don't work if the module is imported as a main module.
import __init__

from skeinforge_tools.skeinforge_utilities.vec3 import Vec3
from skeinforge_tools.skeinforge_utilities import euclidean
from skeinforge_tools.skeinforge_utilities import gcodec
from skeinforge_tools.skeinforge_utilities import intercircle
from skeinforge_tools.skeinforge_utilities import preferences
from skeinforge_tools import analyze
from skeinforge_tools import fill
from skeinforge_tools import import_translator
from skeinforge_tools import material
from skeinforge_tools import polyfile
import cStringIO
import math
import sys
import time


__author__ = "Enrique Perez (perez_enrique@yahoo.com)"
__date__ = "$Date: 2008/21/04 $"
__license__ = "GPL 3.0"


def getSpeedChainGcode( filename, gcodeText, speedPreferences = None ):
	"Speed a gcode linear move text.  Chain speed the gcode if it is not already speeded."
	gcodeText = gcodec.getGcodeFileText( filename, gcodeText )
	if not gcodec.isProcedureDone( gcodeText, 'fill' ):
		gcodeText = fill.getFillChainGcode( filename, gcodeText )
	return getSpeedGcode( gcodeText, speedPreferences )

def getSpeedGcode( gcodeText, speedPreferences = None ):
	"Speed a gcode linear move text."
	if gcodeText == '':
		return ''
	if gcodec.isProcedureDone( gcodeText, 'speed' ):
		return gcodeText
	if speedPreferences == None:
		speedPreferences = SpeedPreferences()
		preferences.readPreferences( speedPreferences )
	if not speedPreferences.activateSpeed.value:
		return gcodeText
	skein = SpeedSkein()
	skein.parseGcode( gcodeText, speedPreferences )
	return skein.output.getvalue()

def writeOutput( filename = '' ):
	"""Speed a gcode linear move file.  Chain speed the gcode if it is not already speeded.
	If no filename is specified, speed the first unmodified gcode file in this folder."""
	if filename == '':
		unmodified = import_translator.getGNUTranslatorFilesUnmodified()
		if len( unmodified ) == 0:
			print( "There are no unmodified gcode files in this folder." )
			return
		filename = unmodified[ 0 ]
	speedPreferences = SpeedPreferences()
	preferences.readPreferences( speedPreferences )
	startTime = time.time()
	print( 'File ' + gcodec.getSummarizedFilename( filename ) + ' is being chain speeded.' )
	suffixFilename = filename[ : filename.rfind( '.' ) ] + '_speed.gcode'
	speedGcode = getSpeedChainGcode( filename, '', speedPreferences )
	if speedGcode == '':
		return
	gcodec.writeFileText( suffixFilename, speedGcode )
	print( 'The speeded file is saved as ' + gcodec.getSummarizedFilename( suffixFilename ) )
	analyze.writeOutput( suffixFilename, speedGcode )
	print( 'It took ' + str( int( round( time.time() - startTime ) ) ) + ' seconds to speed the file.' )


class SpeedPreferences:
	"A class to handle the speed preferences."
	def __init__( self ):
		"Set the default preferences, execute title & preferences filename."
		materialName = material.getSelectedMaterial()
		#Set the default preferences.
		self.archive = []
		self.activateSpeed = preferences.BooleanPreference().getFromValue( 'Activate Speed:', True )
		self.archive.append( self.activateSpeed )
		self.feedrateSecond = preferences.FloatPreference().getFromValue( 'Feedrate (mm/s):', 16.0 )
		self.archive.append( self.feedrateSecond )
		self.filenameInput = preferences.Filename().getFromFilename( import_translator.getGNUTranslatorGcodeFileTypeTuples(), 'Open File to be Speeded', '' )
		self.archive.append( self.filenameInput )
		flowrateRadio = []
		self.flowrateChoiceLabel = preferences.LabelDisplay().getFromName( 'Flowrate Choice: ' )
		self.archive.append( self.flowrateChoiceLabel )
		self.flowrateDoNotAddFlowratePreference = preferences.Radio().getFromRadio( 'Do Not Add Flowrate', flowrateRadio, False )
		self.archive.append( self.flowrateDoNotAddFlowratePreference )
		self.flowrateMetricPreference = preferences.Radio().getFromRadio( 'Metric', flowrateRadio, False )
		self.archive.append( self.flowrateMetricPreference )
		self.flowratePWMPreference = preferences.Radio().getFromRadio( 'PWM Setting', flowrateRadio, True )
		self.archive.append( self.flowratePWMPreference )
		self.flowratePWMSetting = preferences.FloatPreference().getFromValue( 'Flowrate PWM Setting (if PWM Setting is Chosen):', 210.0 )
		self.archive.append( self.flowratePWMSetting )
		self.orbitalFeedrateOverOperatingFeedrate = preferences.FloatPreference().getFromValue( 'Orbital Feedrate over Operating Feedrate (ratio):', 0.5 )
		self.archive.append( self.orbitalFeedrateOverOperatingFeedrate )
		#Create the archive, title of the execute button, title of the dialog & preferences filename.
		self.executeTitle = 'Speed'
		self.filenamePreferences = preferences.getPreferencesFilePath( 'speed_' + materialName + '.csv' )
		self.filenameHelp = 'skeinforge_tools.speed.html'
		self.saveTitle = 'Save Preferences'
		self.title = 'Speed Preferences'

	def execute( self ):
		"Speed button has been clicked."
		filenames = polyfile.getFileOrDirectoryTypesUnmodifiedGcode( self.filenameInput.value, import_translator.getGNUTranslatorFileTypes(), self.filenameInput.wasCancelled )
		for filename in filenames:
			writeOutput( filename )


class SpeedSkein:
	"A class to speed a skein of extrusions."
	def __init__( self ):
		self.decimalPlacesCarried = 3
		self.feedrateSecond = 16.0
		self.lineIndex = 0
		self.lines = None
		self.oldLocation = None
		self.output = cStringIO.StringIO()

	def addFlowrate( self ):
		"Add flowrate line."
		roundedFlowrate = euclidean.getRoundedToThreePlaces( math.pi * self.extrusionDiameter * self.extrusionDiameter / 4.0 * self.feedrateSecond )
		self.addLine( '(<flowrateCubicMillimetersPerSecond> ' + roundedFlowrate + ' )' )
		if self.speedPreferences.flowrateDoNotAddFlowratePreference.value:
			return
		if self.speedPreferences.flowrateMetricPreference.value:
			self.addLine( 'M108 S' + roundedFlowrate )
			return
		self.addLine( 'M108 S' + euclidean.getRoundedToThreePlaces( self.speedPreferences.flowratePWMSetting.value ) )

	def addLine( self, line ):
		"Add a line of text and a newline to the output."
		if len( line ) > 0:
			self.output.write( line + "\n" )

	def getGcodeFromFeedrateMovement( self, feedrateMinute, point ):
		"Get a gcode movement."
		return "G1 X%s Y%s Z%s F%s" % ( self.getRounded( point.x ), self.getRounded( point.y ), self.getRounded( point.z ), self.getRounded( feedrateMinute ) )

	def getRounded( self, number ):
		"Get number rounded to the number of carried decimal places as a string."
		return euclidean.getRoundedToDecimalPlaces( self.decimalPlacesCarried, number )

	def getSpeededLine( self, splitLine ):
		"Get elevated gcode line with operating feedrate."
		location = gcodec.getLocationFromSplitLine( self.oldLocation, splitLine )
		self.oldLocation = location
		return self.getGcodeFromFeedrateMovement( 60.0 * self.feedrateSecond, location )

	def parseGcode( self, gcodeText, speedPreferences ):
		"Parse gcode text and store the speed gcode."
		self.speedPreferences = speedPreferences
		self.feedrateSecond = speedPreferences.feedrateSecond.value
		self.orbitalFeedratePerSecond = self.feedrateSecond * speedPreferences.orbitalFeedrateOverOperatingFeedrate.value
		self.lines = gcodec.getTextLines( gcodeText )
		self.parseInitialization()
		for line in self.lines[ self.lineIndex : ]:
			self.parseLine( line )

	def parseInitialization( self ):
		"Parse gcode initialization and store the parameters."
		for self.lineIndex in range( len( self.lines ) ):
			line = self.lines[ self.lineIndex ]
			splitLine = line.split()
			firstWord = gcodec.getFirstWord( splitLine )
			if firstWord == '(<decimalPlacesCarried>':
				self.decimalPlacesCarried = int( splitLine[ 1 ] )
			elif firstWord == '(<extrusionDiameter>':
				self.extrusionDiameter = float( splitLine[ 1 ] )
				self.addFlowrate()
			elif firstWord == '(<extrusionWidth>':
				self.addLine( '(<feedrateMinute> %s )' % ( 60.0 * self.feedrateSecond ) )
				self.addLine( '(<orbitalFeedratePerSecond> %s )' % self.orbitalFeedratePerSecond )
			elif firstWord == '(<extrusionStart>':
				self.addLine( '(<procedureDone> speed )' )
				self.addLine( line )
				self.lineIndex += 1
				return
			self.addLine( line )

	def parseLine( self, line ):
		"Parse a gcode line and add it to the speed skein."
		splitLine = line.split()
		if len( splitLine ) < 1:
			return
		firstWord = splitLine[ 0 ]
		if firstWord == 'G1':
			line = self.getSpeededLine( splitLine )
		self.addLine( line )


def main():
	"Display the speed dialog."
	if len( sys.argv ) > 1:
		writeOutput( ' '.join( sys.argv[ 1 : ] ) )
	else:
		preferences.displayDialog( SpeedPreferences() )

if __name__ == "__main__":
	main()
