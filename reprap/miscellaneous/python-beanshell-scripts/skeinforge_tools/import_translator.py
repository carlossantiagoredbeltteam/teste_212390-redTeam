"""
Import translator is a script to pick an import plugin and optionally print the output to a file.

The default 'Activate Import' checkbox is on.  When it is on, the functions described below will work, when it is off, the functions
will not be called.

Import presents the user with a choice of the import plugins in the import_plugins folder.  The chosen plugin will then modify the
gcode or translate it into another format.  There is also the "Do Not Change Output" choice, which will not change the output.

To print the output to a file, add the file output name to the "Also Send Output To" field.  A common choice is sys.stdout to print
the output in the shell screen.  Another common choice is sys.stderr.  The default is nothing, in which case the output will not be
printed to a file.

If the "Delete M110 Gcode Line" checkbox is true, import will delete the M110 gcode line, whose only purpose is to indicate that
the gcode is generated by skeinforge.  The M110 gcode is not necessary to run a fabricator.

An import plugin is a script in the import_plugins folder which has the functions getOuput and writeOutput.

To run import translator, in a shell type:
> python import_translator.py

The following examples import the files Hollow Square.gts.  The examples are run in a terminal in the folder which contains
Hollow Square.gts & import_translator.py.  The function writeOutput checks to see if the text has been imported, if not they call
getFilletChainGcode in fillet.py to fillet the text; once they have the filleted text, then it imports.


> python import_translator.py
This brings up the dialog, after clicking 'Import', the following is printed:
File Hollow Square.gts is being chain imported.
The imported file is saved as Hollow Square_import.gcode


>python
Python 2.5.1 (r251:54863, Sep 22 2007, 01:43:31)
[GCC 4.2.1 (SUSE Linux)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import import
>>> import.main()
This brings up the import dialog.


>>> import.writeOutput()
Hollow Square.gts
File Hollow Square.gts is being imported.
The imported file is saved as Hollow Square_import.gcode

"""

from __future__ import absolute_import
#Init has to be imported first because it has code to workaround the python bug where relative imports don't work if the module is imported as a main module.
import __init__

from skeinforge_tools.skeinforge_utilities import gcodec
from skeinforge_tools.skeinforge_utilities import preferences
from skeinforge_tools import polyfile
import cStringIO
import os
import sys


__author__ = "Enrique Perez (perez_enrique@yahoo.com)"
__date__ = "$Date: 2008/21/04 $"
__license__ = "GPL 3.0"


def getFileTypes():
	"Get the file types from the translators in the import plugins folder."
	fileTypes = [ ( 'GNU Triangulated Surface text files', '*.gts' ) ] + getTranslatorFileTypes()
	fileTypes.sort()
	return fileTypes

def getImportGcode( gcodeText, importPreferences = None ):
	"Import a gcode linear move text."
	if gcodeText == '':
		return ''
	if gcodec.isProcedureDone( gcodeText, 'import' ):
		return gcodeText
	if importPreferences == None:
		importPreferences = ImportPreferences()
		preferences.readPreferences( importPreferences )
	if not importPreferences.activateImport.value:
		return gcodeText
	skein = ImportSkein()
	skein.parseGcode( importPreferences, gcodeText )
	return skein.output.getvalue()

def getSelectedPlugin( importPreferences ):
	"Get the selected plugin."
	for plugin in importPreferences.importPlugins:
		if plugin.value:
			return plugin
	return None

def getTranslatorFileTypes():
	"Get the file types from the translators in the import plugins folder."
	pluginFilenames = gcodec.getPluginFilenames( 'import_plugins', __file__ )
	fileTypes = []
	for pluginFilename in pluginFilenames:
		fileTypeTitle = pluginFilename.upper() + ' files'
		fileType = ( fileTypeTitle, '*.' + pluginFilename )
		fileTypes.append( fileType )
	fileTypes.sort()
	return fileTypes

def writeOutput( filename = '' ):
	"""Import a gcode linear move file.  Chain import the gcode if it is not already imported.
	If no filename is specified, import the first unmodified gcode file in this folder."""
	if filename == '':
		unmodified = gcodec.getGNUGcode()
		if len( unmodified ) == 0:
			print( "There are no unmodified gcode files in this folder." )
			return
		filename = unmodified[ 0 ]
	importPreferences = ImportPreferences()
	preferences.readPreferences( importPreferences )
	startTime = time.time()
	print( 'File ' + gcodec.getSummarizedFilename( filename ) + ' is being chain imported.' )
	gcodeText = gcodec.getFileText( filename )
	if gcodeText == '':
		return
	suffixFilename = filename[ : filename.rfind( '.' ) ] + '_import.gcode'
	if not gcodec.isProcedureDone( gcodeText, 'fillet' ):
		gcodeText = fillet.getFilletChainGcode( gcodeText )
	analyze.writeOutput( suffixFilename, gcodeText )
	importChainGcode = getImportGcode( gcodeText, importPreferences )
	pluginModule = None
	selectedPlugin = getSelectedPlugin( importPreferences )
	if selectedPlugin != None:
		pluginModule = gcodec.getModule( selectedPlugin.name, 'import_plugins', __file__ )
		importChainGcode = pluginModule.getOutput( importChainGcode )
	if importPreferences.alsoSendOutputTo.value != '':
		exec( 'print >> ' + importPreferences.alsoSendOutputTo.value + ', importChainGcode' )
	if selectedPlugin == None:
		gcodec.writeFileText( suffixFilename, importChainGcode )
		print( 'The imported file is saved as ' + gcodec.getSummarizedFilename( suffixFilename ) )
	else:
		pluginModule.writeOutput( suffixFilename, importChainGcode )
	print( 'It took ' + str( int( round( time.time() - startTime ) ) ) + ' seconds to import the file.' )


class ImportSkein:
	"A class to import a skein of extrusions."
	def __init__( self ):
		self.decimalPlacesImported = 2
		self.output = cStringIO.StringIO()

	def addLine( self, line ):
		"Add a line of text and a newline to the output."
		self.output.write( line + '\n' )

	def getLineWithTruncatedNumber( self, character, line ):
		'Get a line with the number after the character truncated.'
		indexOfCharacter = line.find( character )
		if indexOfCharacter < 0:
			return line
		indexOfNumberEnd = line.find( ' ', indexOfCharacter )
		if indexOfNumberEnd < 0:
			indexOfNumberEnd = len( line )
		indexOfNumberStart = indexOfCharacter + 1
		numberString = line[ indexOfNumberStart : indexOfNumberEnd ]
		if numberString == '':
			return line
		roundedNumberString = euclidean.getRoundedToDecimalPlaces( self.decimalPlacesImported, float( numberString ) )
		return line[ : indexOfNumberStart ] + roundedNumberString + line[ indexOfNumberEnd : ]

	def parseGcode( self, importPreferences, gcodeText ):
		"Parse gcode text and store the import gcode."
		lines = gcodec.getTextLines( gcodeText )
		for line in lines:
			self.parseLine( line, importPreferences.deleteM110GcodeLine.value )

	def parseLine( self, line, removeM110GcodeLine ):
		"Parse a gcode line."
		splitLine = line.split( ' ' )
		if len( splitLine ) < 1 or len( line ) < 1:
			return
		firstWord = splitLine[ 0 ]
		if firstWord == 'M110' and removeM110GcodeLine:
			return
		if firstWord == '(<decimalPlacesCarried>':
			self.decimalPlacesImported = max( 1, int( splitLine[ 1 ] ) - 1 )
		elif firstWord == '(<extrusionStart>':
			self.addLine( '(<procedureDone> import )' )
		if firstWord != 'G1' and firstWord != 'G2' and firstWord != 'G3' :
			self.addLine( line )
			return
		line = self.getLineWithTruncatedNumber( 'X', line )
		line = self.getLineWithTruncatedNumber( 'Y', line )
		line = self.getLineWithTruncatedNumber( 'Z', line )
		line = self.getLineWithTruncatedNumber( 'I', line )
		line = self.getLineWithTruncatedNumber( 'J', line )
		line = self.getLineWithTruncatedNumber( 'R', line )
		self.addLine( line )


class ImportPreferences:
	"A class to handle the import preferences."
	def __init__( self ):
		"Set the default preferences, execute title & preferences filename."
		#Set the default preferences.
		self.archive = []
		self.activateImport = preferences.BooleanPreference().getFromValue( 'Activate Import', True )
		self.archive.append( self.activateImport )
		importPluginFilenames = gcodec.getPluginFilenames( 'import_plugins', __file__ )
		self.importLabel = preferences.LabelDisplay().getFromName( 'Import Translators: ' )
		self.archive.append( self.importLabel )
		self.importOperations = []
		self.importPlugins = []
		for importPluginFilename in importPluginFilenames:
			importPlugin = preferences.LabelDisplay().getFromName( importPluginFilename.upper() )
			self.importPlugins.append( importPlugin )
		self.importPlugins.sort( key = preferences.LabelDisplay.getName )
		self.archive += self.importPlugins
		self.filenameInput = preferences.Filename().getFromFilename( getTranslatorFileTypes(), 'Open File to be Imported', '' )
		self.archive.append( self.filenameInput )
		#Create the archive, title of the execute button, title of the dialog & preferences filename.
		self.executeTitle = 'Import'
		self.filenamePreferences = preferences.getPreferencesFilePath( 'import_translator.csv' )
		self.filenameHelp = 'skeinforge_tools.import_translator.html'
		self.saveTitle = 'Save Preferences'
		self.title = 'Import Preferences'

	def execute( self ):
		"Import button has been clicked."
		filenames = polyfile.getFileOrGNUUnmodifiedGcodeDirectory( self.filenameInput.value, self.filenameInput.wasCancelled )
		for filename in filenames:
			writeOutput( filename )


def main( hashtable = None ):
	"Display the import dialog."
	preferences.displayDialog( ImportPreferences() )

if __name__ == "__main__":
	main()
