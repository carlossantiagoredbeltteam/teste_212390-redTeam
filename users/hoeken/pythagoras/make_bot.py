#!/usr/bin/python
#
# Creates a gcode file and list of rod lengths to build an auto-assembling frame based on various parameters.
#
"""Make a Bot

Creates a gcode file and list of rod lengths to build an auto-assembling frame based on various parameters.

Usage: python make_bot.py [options]

Options:
  -h, --help				show this help
  --x=... 					the desired maximum outside X width of your machine. default = 330mm.
  --y=... 					the desired maximum outside Y width of your machine. default = 330mm.
  --z=...					the desired maximum outside Z height of your machine. default = 330mm.
  --feedrate=...			the desired feedrate for threading nuts (in mm/minute) default = 1000mm/min.
  --nut-height=...			the height of the nut in mm. default = 6.5mm (M8 nut)
  --washer-height=... 		the height of the washer in mm. default = 1.6 (M8 washer)
  --block-width=...			the width of the block you're using. default = 20mm
"""

from math import *
import sys
import getopt

class CartesianFrame:
	"Class to hold the rod lengths"
	def __init__(self, x, y, z):

		#save our sizes
		self.x = x; # x size
		self.y = y; # y size    
		self.z = z; # z size
		
		#how long are our diagonals?
		self.xy = round(sqrt(x*x + y*y), 2);
		self.xz = round(sqrt(x*x + z*z), 2);
		self.yz = round(sqrt(y*y + z*z), 2);

	def getXY(self):
		"Get XY diagonal length"
		return self.xy

	def getXZ(self):
		"Get XY diagonal length"
		return self.xz

	def getYZ(self):
		"Get YZ diagonal length"
		return self.yz
		
	def getVolume(self):
		"Get the volume of the machine in cubit meters"
		return round((self.x / 1000) * (self.y/1000) * (self.z/1000), 2);

def main(argv):

	x = 330.0
	y = 330.0
	z = 330.0

	feedrate = 1000.0

	nutHeight = 6.5
	washerHeight = 1.6
	blockSize = 20.0
	
	xRods = 4
	yRods = 4
	zRods = 4
	xyRods = 2
	xzRods = 4
	yzRods = 4
	totalRods = xRods + yRods + zRods + xyRods + xzRods + yzRods
	
	nutsPerKebab = 4
	totalNuts = totalRods * nutsPerKebab

	washersPerKebab = 4
	totalWashers = totalRods * washersPerKebab

	try:
		opts, args = getopt.getopt(argv, "h", ["help", "x=", "y=", "z=", "feedrate=", "nut-height=", "washer-height=", "block-width="])
	except getopt.GetoptError:
		usage()
		sys.exit(2)
        
	for opt, arg in opts:
		if opt in ("-h", "--help"):
			usage()
			sys.exit()
		elif opt == "--x":
			x = float(arg)
		elif opt == "--y":
			y = float(arg)
		elif opt == "--z":
			z = float(arg)
		elif opt == "--feedrate":
			feedrate = float(arg)
		elif opt == "--nut-height":
			nutHeight = float(arg)
		elif opt == "--washer-height":
			washerHeight = float(arg)
		elif opt == "--block-width":
			blockSize = float(arg)
			
	bot = CartesianFrame(x, y, z)

	print "(Generated by make_bot.py)"
	print "(Required Rod Lengths:)"
	print "( X Rods: 4 * %6.2fmm)" % (x)
	print "( Y Rods: 4 * %6.2fmm)" % (y)
	print "( Z Rods: 4 * %6.2fmm)" % (z)
	print "(XZ Rods: 4 * %6.2fmm)" % (bot.getXZ())
	print "(YZ Rods: 4 * %6.2fmm)" % (bot.getYZ())
	print "(XY Rods: 2 * %6.2fmm)" % (bot.getXY())
	print "(Total Volume: %6.2fm^3)" % (bot.getVolume())
	print "(Total kebabs: %d)" % (totalRods)
	print "(Total nuts required: %d)" % (totalNuts)
	print "(Total washers required: %d)" % (totalNuts)
	#TODO: print the total number of whole rods required.
	
def usage():
    print __doc__

if __name__ == "__main__":
	main(sys.argv[1:])
